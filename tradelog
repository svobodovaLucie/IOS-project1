#!/bin/sh

##############################
#
#   FIT VUT
#   Řešení IOS - Projekt 1
#   Autor: Lucie Svobodová
#          xsvobo1x
#   Datum: 27. 3. 2021
#
##############################

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

print_help() {
    echo "Použití: tradelog [-h|--help] [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]                                      "
    echo "PŘÍKAZ může být jeden z následujících:                                                                "
    echo "      list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. tickerů.                  "
    echo "      profit – výpis celkového zisku z uzavřených pozic.                                              "
    echo "      pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.                     "
    echo "      last-price – výpis poslední známé ceny pro každý ticker.                                        "
    echo "      hist-ord – výpis histogramu počtu transakcí dle tickeru.                                        "
    echo "      graph-pos – výpis grafu hodnot držených pozic dle tickeru.                                      "
    echo "FILTR může být kombinace následujících:                                                               "
    echo "      -a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data).              "
    echo "                    DATETIME je formátu YYYY-MM-DD HH:MM:SS.                                          "
    echo "      -b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).          "
    echo "      -t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. Při více výskytech        "
    echo "                  přepínače se bere množina všech uvedených tickerů.                                  "
    echo "      -w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH.         "
    echo "                 Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění.   "
    echo "      -h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače.                     "
}

TICKERS=""
COMMAND=""
DATETIME_AFTER="0000-00-00 00:00:00"
DATETIME_BEFORE="9999-99-99 99:99:99"
WIDTH=""
LOG_FILES=""
GZ_LOG_FILES=""
TICKERS_COUNTER=0
output_unformatted=""

# Function saves tickers into variable TICKERS (ticker1;ticker2...)
# and a number of tickers into TICKERS_COUNTER
get_tickers()
{
    if [ -z "$TICKERS" ]; then
        list_of_tickers=$(echo "$READ_INPUT" | awk -F ';' '{print $2}' | sort | uniq)
        TICKERS=$(echo "$list_of_tickers" | awk 'BEGIN{ORS="|"} {print $0}')
        TICKERS_COUNTER=$(echo "$list_of_tickers" | awk 'END{print NR}')
    fi
}

# Function finds the higher number of len_of_res and max_len and saves it into max_len
find_max_len()
{
    if [ "$len_of_res" -gt "$max_len" ]; then
        max_len="$len_of_res"
    fi
}

# Function saves info about currently processed ticker into variable that stores info about all tickers
save_output_unformatted()
{
    if [ -z "$output_unformatted" ]; then
        output_unformatted="$curr_ticker_output"
    else
        output_unformatted="$output_unformatted\n$curr_ticker_output"
    fi
}

# Function saves profit for each ticker into variable output_unformatted
# in format : (ticker1_name;profit1'\n'ticker2_name;profit2'\n'...)
get_profit()
{
    # get all tickers if any ticker filter entered
    get_tickers
        
    tic_num=0
    while [ "$tic_num" != "$TICKERS_COUNTER" ]
    do
        # loads currently proccesed ticker into curr_ticker
        tic_num=$((tic_num + 1))
        curr_ticker=$(echo "$TICKERS" | awk -F '|' -v i=$tic_num '{print $i}')
        
        curr_ticker_output=$(echo "$READ_INPUT" | awk -F ';' -v tic="$curr_ticker" '{ if ($2==tic && $3=="sell")
                     {sum+=$4*$6} if ($2==tic && $3=="buy") {sum-=$4*$6} } END {printf("%.2f", sum)}')
        save_output_unformatted
    done
}

# Function saves list of values ​​of currently held positions into output_unformatted variable
# in format : (ticker1_name;pos_of_ticker1'\n'ticker2_name;pos_of_ticker2'\n'...)
get_all_tickers_pos()
{
    # get all tickers if any ticker filter entered
    get_tickers
        
    tic_num=0
    max_len=0
    while [ "$tic_num" != "$TICKERS_COUNTER" ]
    do
        # loads currently proccesed ticker into curr_ticker
        tic_num=$((tic_num + 1))
        curr_ticker=$(echo "$TICKERS" | awk -F '|' -v i=$tic_num '{print $i}')
            
        num_of_units=$(echo "$READ_INPUT" | awk -F ';' -v tic="$curr_ticker" '{ if ($2==tic && $3=="buy")
                     {sum+=$6} if ($2==tic && $3=="sell") {sum-=$6} } END {printf("%d", sum)}')
        if [ "$num_of_units" -eq 0 ]; then
            continue
        fi

        last_price=$(echo "$READ_INPUT" | awk -F ';' -v tic="$curr_ticker" -v last=0 '{if ($2==tic){last=$4}}
                     END{print last}')
            
        curr_ticker_info="$curr_ticker;$num_of_units;$last_price"
        res_for_curr_ticker=$(echo "$curr_ticker_info" | awk -v units="$num_of_units" -v price="$last_price" '
                            {res = units * price} END {printf("%05.2f", res)}')
            
        len_of_res=${#res_for_curr_ticker}
        find_max_len

        # adds info about currently processed ticker into output_unformatted
        curr_ticker_output="$curr_ticker;$res_for_curr_ticker"
        save_output_unformatted
    done
}

# Function saves the last price of each ticket into variable output_formatted
# in format : (ticker1_name;last_price1'\n'ticker2_name;last_price2'\n'...)
get_last_price()
{
    # get all tickers if any ticker filter entered
    get_tickers
        
    tic_num=0
    max_len=0
    while [ "$tic_num" != "$TICKERS_COUNTER" ]
    do
        # loads currently proccesed ticker into curr_ticker
        tic_num=$((tic_num + 1))
        curr_ticker=$(echo "$TICKERS" | awk -F '|' -v i=$tic_num '{print $i}')
            
        res_for_curr_ticker=$(echo "$READ_INPUT" | awk -F ';' -v tic="$curr_ticker" -v last=0 '
                            { if ($2 == tic){last=$4} } END{print last}')
        len_of_res=${#res_for_curr_ticker}
        find_max_len

        # adds info about currently processed ticker into output_unformatted
        curr_ticker_output="$curr_ticker;$res_for_curr_ticker"
        save_output_unformatted
    done
}

# Function saves the number of transactions for each ticker into variable output_unformatted
# in format (ticker1_name;num_of_transactions1'\n'ticker2_name;num_of_transactions2...)
get_num_of_transactions()
{
    # get all tickers if any ticker filter entered
    get_tickers

    tic_num=0
    max_len=0
    transaction_counter=0
    while [ "$tic_num" != "$TICKERS_COUNTER" ]
    do
        # loads currently proccesed ticker into curr_ticker
        tic_num=$((tic_num + 1))
        curr_ticker=$(echo "$TICKERS" | awk -F '|' -v i=$tic_num '{print $i}')
        transaction_counter=$(echo "$READ_INPUT" | awk -F ';' -v i=0 -v tic="$curr_ticker" '
                            { if ($2 == tic){i+=1} }END {print i}')
        # save unformatted output
        curr_ticker_output="$curr_ticker;$transaction_counter"
        save_output_unformatted
    done
}

# Function saves input files into variable READ_INPUT
store_input()
{
    if ! [ -z "$GZ_LOG_FILES" ] && [ -z "$LOG_FILES" ]; then
        READ_INPUT=$(gzip -d -c $GZ_LOG_FILES)
    elif ! [ -z "$GZ_LOG_FILES" ]; then
        READ_INPUT=$(gzip -d -c $GZ_LOG_FILES && cat $LOG_FILES)
    else
        READ_INPUT=$(cat $LOG_FILES)
    fi
}

## main --------------------------------------------------------------------------------------
# process arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        list-tick | profit | pos | last-price | hist-ord | graph-pos)
            if [ -z "$COMMAND" ]; then
                COMMAND="$1"
            else
                echo "Povolen je pouze jeden příkaz." >&2; exit 1
            fi
            shift ;;
        --help | -h)
            print_help; exit 0 ;;
        -a)
            DATETIME_AFTER="$2"
            shift; shift ;;
        -b)
            DATETIME_BEFORE="$2"
            shift; shift ;;
        -t)
            if [ -z "$TICKERS" ]; then
                TICKERS="$2"
            else 
                TICKERS="$TICKERS|$2"
            fi
            TICKERS_COUNTER=$((TICKERS_COUNTER+1))
            shift; shift ;;
        -w)
            if [ -z "$WIDTH" ]; then
                number_check=$(echo "$2" | awk '$0 ~/[+]?[^0-9]/ { printf("%d", 0)}')
                if [ "$number_check" != "0" ]; then
                    WIDTH="$2"
                else
                    echo "Filtr width musí být kladné celé číslo." >&2; exit 1
                fi
            else
                echo "Povolen je pouze jeden přepínač -w." >&2; exit 1
            fi
            if [ -z "$2" ]; then
                echo "Nebyla zadána hodnota WIDTH za přepínačem -w" >&2; exit 1
            fi
            shift; shift ;;
         *)
            # check file validity
            if ! [ -f "$1" ]; then
		        echo "Zadaný soubor není validní." >&2; exit 1	
	        fi
            # save file into variable
            if [ $(echo $1 | grep "\.gz") ]; then
                GZ_LOG_FILES="$GZ_LOG_FILES $1"
            else 
                LOG_FILES="$LOG_FILES $1"
            fi
            shift ;;
    esac
done

store_input

# datetime filter
READ_INPUT=$(echo "$READ_INPUT" | awk -F ';' -v date="$DATETIME_AFTER" '$1 > date {print $0}')
READ_INPUT=$(echo "$READ_INPUT" | awk -F ';' -v date="$DATETIME_BEFORE" '$1 < date {print $0}')

# tickers filter
if ! [ -z "$TICKERS" ]; then
    curr_cnt=0
    filtered=""
    while [ "$curr_cnt" != "$TICKERS_COUNTER" ] ; do
        curr_cnt=$((curr_cnt + 1))
        curr_ticker=$(echo "$TICKERS" | awk -F '|' -v count=$curr_cnt '{print $(count)}')
        filtered=$(echo "$READ_INPUT" | awk -F ';' -v tic="$curr_ticker" '$2 == tic {print $0}')
        if [ -z "$OUTPUT" ]; then
            OUTPUT="$filtered"
        else
            OUTPUT="$OUTPUT\n$filtered"
        fi
    done
    READ_INPUT=$(echo "$OUTPUT" | sort)
fi

case "$COMMAND" in
    list-tick)
        # output: a list of stock exchange symbols, so-called "ticks"
        OUTPUT=$(echo "$READ_INPUT" | awk -F ';' '{print $2}' | sort | uniq)
        ;;
    profit)
        # output: statement of total profit from closed positions
        get_profit
        OUTPUT=$(echo "$output_unformatted" | awk -v profit=0 '{profit+=$1} END {printf("%.2f", profit)}')
        ;;
    pos)
        # output: list of values ​​of currently held positions sorted in descending order by value
        get_all_tickers_pos
        OUTPUT=$(echo "$output_unformatted" | awk -F ';' -v len=$max_len '{printf("%-9s :%*.2f\n", $1, len+1, $2)}' | sort -t ':' -h -r  -k 2)
        ;;
    last-price)
        # output: list of the last known price for each ticker
        get_last_price
        OUTPUT=$(echo "$output_unformatted" | awk -F ';' -v len=$max_len '{printf("%-9s :%*.2f\n", $1, len+1, $2)}' | sort -t ':' -k1)
        ;;
    hist-ord)
        # output: histogram of the number of transactions according to the ticker
        get_num_of_transactions

        if ! [ -z "$WIDTH" ]; then
            # find max length and find length of each line
            max=$(echo "$output_unformatted" | awk -F ';' 'BEGIN{max=0} {if($2 > max) max=$2} END{print max}')
            output_unformatted=$(echo "$output_unformatted" | awk -F ';' -v m="$max" -v w="$WIDTH" 'BEGIN{one=m/w}
                                {$2=($2/one)-(0.49)} {printf("%s;%.0f\n", $1, $2)}')
        fi
        OUTPUT=$(echo "$output_unformatted" | awk -F ';' '{num=$2; $2=""; for(i=0; i<num; i++){$2=$2"#"};
                if (num != 0) $2=" "$2;} {printf("%-9s :%-s\n", $1, $2)}')
        ;;
    graph-pos)
        # output: graph of values ​​of held positions according to the ticker
        get_all_tickers_pos     # get numerical values of held positions for each ticker

        if [ -z "$WIDTH" ]; then    # one character = 1000
            output_unformatted=$(echo "$output_unformatted" | awk -F ';' '{ if ($2 > 0){$2=($2/1000)-(0.49)}
                                else {$2=($2/1000)+(0.49)} }{ printf("%s;%.0f\n", $1, $2) } ')
        else
            max=$(echo "$output_unformatted" | awk -F ';' 'function abs(n){return n<0 ? -n : n};
                BEGIN{max=0} {if(abs($2) > max) max=abs($2)} END{print max}')
            output_unformatted=$(echo "$output_unformatted" | awk -F ';' -v m="$max" -v w="$WIDTH" 'BEGIN{one=m/w}
                { if ($2 > 0){$2=($2/one)-(0.49)} else {$2=($2/one)+(0.49)} }{printf("%s;%.0f\n", $1, $2)} ')
        fi
        OUTPUT=$(echo "$output_unformatted" | awk -F ';' '{num=$2; $2=""; if (num > 0) {for(i=0; i<num; i++){$2=$2"#"}};
                if (num < 0) {for(i=num; i<0; i++){$2=$2"!"}}; if (num != 0) $2=" "$2;} {printf("%-9s :%-s\n", $1, $2)}')
        ;;
    *)
        OUTPUT="$READ_INPUT"
        ;;
esac

echo "$OUTPUT"
exit 0